require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'
#require_relative './apples_utils'
require_relative './swagger'
require 'fsp_harvester'

debug = false
debug = true if ARGV and ARGV[0]
VERSION = 'Apples-0.0.1'

def testGUID
  @swagger.addComment("INFO: TEST VERSION '#{VERSION}'\n")

  guid = @swagger.testedGUID

  links, metadata = FspHarvester::Utils.resolve_guid(guid: guid)
  @swagger.score = 0

  metadata.comments.each do |c|
    @swagger.addComment(c)
  end

  if metadata.guidtype == 'unknown'
    @swagger.addComment("FAILURE: The identifier #{guid} did not match any known identification system.\n")
    @swagger.score = 0
    return @swagger.createEvaluationResponse
  end


  links.each do |link|
    if link.relation =~ /cite-as/  # rel can have multiple types
      if (link.href =~ /(purl)\./) or (link.href =~ /(oclc)\./) or (link.href =~ /(fdlp)\./) or (link.href =~ /(purlz)\./) or (link.href =~ /(w3id)\./) or (link.href =~ /(ark):/) or (link.href =~ /(doi.org)/)
        @swagger.addComment("INFO: The HTTP or HTML headers contain a cite-as link.\n")
        @swagger.addComment("SUCCESS: The HTTP or HTML headers contain a cite-as link which matches a permanent identifier type.\n")
        @swagger.score = 1
        return @swagger.createEvaluationResponse
      else
        @swagger.addComment("INFO: The HTTP or HTML headers contain a cite-as link.\n")
        @swagger.addComment("WARN: The HTTP or HTML headers contain a cite-as link which does not match a permanent identifier type.\n")
      end
    end
  end
  @swagger.addComment("FAILURE: No cite-as link found that matches a permanent identifier type.\n")
  @swagger.createEvaluationResponse
end

if debug
  ENV['TEST_PROTOCOL'] = 'http'
  ENV['TEST_HOST'] = 'metricstest.org'
  ENV['TEST_PATH'] = '/tests/'
  url = ARGV[0] # "https://w3id.org/a2a-fair-metrics/03-http-citeas-only/"
  @input = "{\"subject\": \"#{url}\"}"
else
  @input = $stdin.read
end

cgi = CGI.new

schemas = { 'subject' => ['string', 'the GUID being tested'] }

@swagger = Swagger.new({
                         title: 'FAIR Maturity Apples to Apples perma-cite-as',
                         description: "Test that the header and/or body of the landing page contains a 'cite-as' link which is some kind of permanent id",
                         tests_metric: 'https://purl.org/fair-metrics/Apples_F3-A',
                         version: VERSION,
                         applies_to_principle: 'F3',
                         organization: 'Mark Wilkinson',
                         org_url: 'http://fairmetrics.org',
                         responsible_developer: 'Mark D Wilkinson',
                         email: 'markw@illuminae.com',
                         developer_ORCiD: '0000-0001-6960-357X',
                         protocol: ENV['TEST_PROTOCOL'],
                         host: ENV['TEST_HOST'],
                         basePath: ENV['TEST_PATH'],
                         path: 'Apples_perma-cite-as',
                         response_description: 'The response is a binary (1/0), success or failure',
                         schemas: schemas,
                         fairsharing_key_location: ENV['FAIRSHARING_KEY'],
                         debug: false
                       })

if (!cgi.request_method or cgi.request_method == 'GET') and !debug
  puts "Content-type: application/openapi+yaml;version=3.0\n\n"
  puts @swagger.getSwagger
elsif cgi.request_method == 'POST' or debug
  input_json = JSON.parse(@input)
  guid = input_json['subject']
  @swagger.testedGUID = guid
  response = testGUID
  puts "Content-type: application/ld+json\n\n"
  puts response
end
