require 'cgi'
require 'json'
require 'uri'
require 'rdf'
require 'rdf/turtle'
require 'sparql'
require 'stringio'
#require_relative './apples_utils'
require_relative './swagger'
require 'fsp_harvester'

debug = false
debug = true if ARGV and ARGV[0]
VERSION = 'Apples-0.0.1'

def testGUID
  @swagger.addComment("INFO: TEST VERSION '#{VERSION}'\n")

  guid = @swagger.testedGUID

  links, metadata = FspHarvester::Utils.resolve_guid(guid: guid)
  @swagger.score = 0

  metadata.comments.each do |c|
    @swagger.addComment(c)
  end

  if metadata.guidtype == 'unknown'
    @swagger.addComment("FAILURE: The identifier #{guid} did not match any known identification system.\n")
    @swagger.score = 0
    return @swagger.createEvaluationResponse
  end


  links.each do |link|
    next unless link.relation =~ /describedby/

    @swagger.addComment("INFO: The HTTP or HTML headers contain a describedby link.\n")
    metadata = ""
    if link.respond_to? 'type'
      @swagger.addComment("INFO: The HTTP or HTML headers contain a describedby link that includes a type.\n")
      if link.respond_to 'profile'
        @swagger.addComment("INFO: #{link} claims to follow profile #{link.profile}.\n")
      end
      @swagger.addComment("INFO: Calling GET on #{link} with headers Accept: #{link.type}.\n")
      begin
        metadata = RestClient::Request.execute(method: :get, url: link,
                                              headers: { content_type: valhash[:type] })
        if metadata.headers[:content_type].match(link.type.gsub('+', '.'))  # plus is interpreted as a regexp character
          @swagger.addComment("INFO: The HTTP or HTML headers contain a describedby link that properly responds.\n")
        else
          @swagger.addComment("FAILURE: The HTTP or HTML headers contain a describedby link whose representation doesn't match the declared type after content-negotiation.\n")
          @swagger.score = 0
          return @swagger.createEvaluationResponse
        end
      rescue StandardError
        @swagger.addComment("FAILURE: The HTTP or HTML headers contain a describedby link that does not respond to a content-negotiated HEAD request.\n")
        @swagger.score = 0
        return @swagger.createEvaluationResponse
      end
    else
      @swagger.addComment("FAILURE: The HTTP or HTML headers contain a describedby link that does not include a type. This is required.\n")
    end
    @swagger.addComment("INFO: Testing metadata to see if it is readable\n")
    @swagger.score = checkMetadata(metadata)

  end

  if @swagger.score == 1
    @swagger.addComment("SUCCESS: Metadata Parsed.\n")
  else
    @swagger.addComment("FAILURE: Unable to find or parse describedby metadata.\n")
  end
  @swagger.createEvaluationResponse
end

def checkMetadata(metadata)  # metadata is a full http response objecgt
  allrdftypes = RDF_FORMATS.values.flatten
  $stderr.puts allrdftypes
  ctype, profile = metadata.headers[:content_type].split(";")
  $stderr.puts "CT: #{ctype}"
  
  if allrdftypes.include?(ctype)

    data = StringIO.new(metadata.body)
    g = RDF::Graph.new()
    RDF::Reader.for(content_type: ctype).new(data) do |reader|
      reader.each_statement do |statement|
        g << statement
      end
    end
    predicate = predicate ? "<#{predicate}>" : "?p"
    value = value ? "<#{value}>" : "?o"
    
    querytext = "SELECT ?s where {?s #{predicate} #{value} }"
    query = SPARQL.parse(querytext)
    g.query(query) do |result|
      s = result[:s]
      if s and !s.value.nil?
        @swagger.addComment("INFO: metadata parsed correctly.\n")
        return 1
      else
        @swagger.addComment("INFO: metadata not parsed.\n")
        return 0
      end
    end
  end
  @swagger.addComment("INFO: metadata not RDF.\n")
  return 0
end

if debug
  ENV['TEST_PROTOCOL'] = 'http'
  ENV['TEST_HOST'] = 'metricstest.org'
  ENV['TEST_PATH'] = '/tests/'
  url = ARGV[0] # "https://w3id.org/a2a-fair-metrics/03-http-citeas-only/"
  @input = "{\"subject\": \"#{url}\"}"
else
  @input = $stdin.read
end

cgi = CGI.new

schemas = { 'subject' => ['string', 'the GUID being tested'] }

@swagger = Swagger.new({
                         title: 'FAIR Maturity Apples to Apples describedby with Retrieval',
                         description: "Test that a 'describedby' link can be retrieved and parsed whether in compact or expanded JSON",
                         tests_metric: 'https://purl.org/fair-metrics/Apples_describedby_retrieve',
                         version: VERSION,
                         applies_to_principle: 'F2',
                         organization: 'Mark Wilkinson',
                         org_url: 'http://fairmetrics.org',
                         responsible_developer: 'Mark D Wilkinson',
                         email: 'markw@illuminae.com',
                         developer_ORCiD: '0000-0001-6960-357X',
                         protocol: ENV['TEST_PROTOCOL'],
                         host: ENV['TEST_HOST'],
                         basePath: ENV['TEST_PATH'],
                         path: 'Apples_describedby_retrieve',
                         response_description: 'The response is a binary (1/0), success or failure',
                         schemas: schemas,
                         fairsharing_key_location: ENV['FAIRSHARING_KEY'],
                         debug: false
                       })

if (!cgi.request_method or cgi.request_method == 'GET') and !debug
  puts "Content-type: application/openapi+yaml;version=3.0\n\n"
  puts @swagger.getSwagger
elsif cgi.request_method == 'POST' or debug
  input_json = JSON.parse(@input)
  guid = input_json['subject']
  @swagger.testedGUID = guid
  response = testGUID
  puts "Content-type: application/ld+json\n\n"
  puts response
end
